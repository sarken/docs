<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
		<head>
	  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Flexible Accessible Semantic</title>
		<link rel="stylesheet" type="text/css" href="front-end.css"/>
		<style type="text/css"><!--
		#documentexample li, 	#documentexample span {border-color:#ccc;}
		#documentexample li:hover, 	#documentexample span:hover {border:1px solid;}
 a.otw {background: #900; color:#fff; border:2px solid #000; font: 100 small-caps 1.5em 'gill sans',sans-serif; text-decoration:none; padding:0.15em }-->
		</style>
	</head>
	<body>
		<div class="wrapper">
			<div class="article">
				<h1>What is flexible markup?</h1>
				<p>Flexible markup works in different contexts; its display is easy to change; it expands to contain new information. Flexible markup turns on a dime.
				</p>
				<p>It's important to write flexible markup because you can't always know how your information will be accessed, or what needs all your users have. You cannot know how the archive will be developed or what the interface will contain. Make everything you write easy for other people to use and modify. Be open.
				</p>
				<h2>We Are Anonymous</h2>
				<p>Semantic markup is the process of naming data, of giving meaning to undifferentiated text. Browsers can't recognise text unless it is described by html tags, so we call everything that is not a tag <em>anonymous</em>.</p>
				<p><code>&lt;p&gt;</code>This sentence is anonymous inline content, but we know this is a paragraph because it's marked as one with html.<code>&lt;/p&gt;</code></p>
								
				<h2>Hooks</h2>
				<p>Semantic (meaningful) markup is flexible. It's consistent and easy to understand, but there is another practical benefit: semantic markup has lots of hooks.
				</p>
				<p>Compare these two ways of writing a series of links:</p>
				<ol>
					<li>
<pre><code>
&lt;p&gt;&lt;a href=".."&gt;link one&lt;/a&gt; | &lt;a href=".."&gt;link two&lt;/a&gt; | &lt;a href=".."&gt;link three&lt;/a&gt;&lt;/p&gt;</code></pre>
					</li>
					<li>
<pre><code>
&lt;ul class="navigation"&gt;
	&lt;li&gt;&lt;a href=".."&gt;link one&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=".."&gt;link two&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=".."&gt;link three&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</code></pre>
					</li>
				</ol>
				<p>Remembering what you know about anonymous, inline, and block elements, look again:</p>
				<ol>
					<li class="diagram"><span>&lt;p&gt;<span>&lt;a href=".."&gt;link one&lt;/a&gt;</span> | <span>&lt;a href=".."&gt;link two&lt;/a&gt;</span> | <span>&lt;a href=".."&gt;link three&lt;/a&gt;</span>&lt;/p&gt;
					</span></li>
					<li class="diagram">&lt;ul class="navigation"&gt;
						<ul>
							<li>
								&lt;li&gt;
								<span>&lt;a href=".."&gt;link one&lt;/a&gt;</span>
								&lt;/li&gt;
							</li>
							<li>
								&lt;li&gt;
								<span>&lt;a href=".."&gt;link two&lt;/a&gt;</span>
								&lt;/li&gt;
							</li>
							<li>
								&lt;li&gt;
								<span>&lt;a href=".."&gt;link three&lt;/a&gt;</span>
								&lt;/li&gt;
							</li>
							&lt;/ul&gt;
						</ul>
					</li>
				</ol>
				<p>In the second structure, every bit of data is named and tagged. A tag is a box. Boxes can be manipulated. Anonymous inline content cannot be selected easily. Ease is a priority.</p>
				<p>Even though it might look more complicated, because there are more tags, the second structure is more flexible, accessible, and semantic. In the future, it will be easier to change around, and it's possible for external actors, like user agents and third party applications, to see and use the data.</p>
				
				<h3>Comments are everything</h3>
				<p>tba</p>
				<h3>Reduce, Reuse, Recycle</h3>
			</div>
			<p><a href="index.html">&larr; Back</a></p>
		</div>
	</body>
</html>