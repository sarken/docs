<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<html>
		<head>
	  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Debugging for Internet Explorer</title>
		<link rel="stylesheet" type="text/css" media="screen" href="front-end.css" />
	</head>
	<body>
		<div class="wrapper">
			<div class="article">
				<h1>Debugging for Internet Explorer (IE)</h1>
				<p>We code first for browsers that support <a href="w3c.org">Standards</a>, and then we write extra rules for Internet Explorer. These rules are <em>conditionals</em>. The condition is "if Internet Explorer, do this instead".
				</p>
				<p>We use few rules that do not work in Internet Explorer. Our <a href="coding-standards.html">Coding Standards</a> restrict us to CSS2.1 for critical content. This is because we want our archive to be as accessible as possible to everyone who wants to use it, including people using old machines or browsers that don't work very well.</p>
				<p>There are lots of resources online documenting the ways that Internet Explorer interprets CSS. Some useful ones are:
				</p>
				<ul>
					<li><a href="http://www.quirksmode.org/">Quirksmode</a></li>
					<li><a href="http://www.positioniseverything.net/">Position is Everything</a></li>
					<li><a href="http://www.communitymx.com/content/article.cfm?cid=C37E0">How To Attack An Internet Explorer (Win) Display Bug</a></li>
					<li><a href="http://www.satzansatz.de/css.html">Satzansatz</a></li>
				</ul>
				<p>The most common problems fall into these categories:</p>
				<ol>
					<li><a href="#haslayout">hasLayout</a></li>
					<li><a href="#margins">Margins and Padding</a></li>
					<li><a href="#inherited">Inherited Width</a></li>
					<li><a href="#height">Height</a></li>
				</ol>
				<h2 id="haslayout">I Can hasLayout</h2>
				<p>Sometimes in IE7 and below, you can see elements but you can't click them, or they are all messed up and overlapping each other, or they jump around the page when you scroll or click, or they appear and disappear and you don't know why. It's some freaky shit.
				</p>
				<p>This is because of a special IE property called hasLayout. <a href="http://www.satzansatz.de/cssd/onhavinglayout.html">Read more about hasLayout</a>.
				</p>
				<p>hasLayout bugs that crop up on our archive divide roughly into two areas: calculations and stacking.
				</p>
				<h3>Calculations</h3>
				<p>Sometimes stuff jumps around when you interact with a page. This is because IE expands all elements to contain their content, so it has to guess at the size and placement of elements before they're completely loaded. For positioned or sized elements (which all has Layout), it doesn't always guess very well. The content loads and it doesn't fit right on the page, but once you hover or click or scroll, or do anything to make IE redraw that element, it slots into place, now that IE knows how big it really is.
				</p>
				<p>You can stop IE making this calculations error by triggering hasLayout on the parent element. Give the broken element's <em>parent</em> the rule <code>zoom:1;</code>
				</p>
				<h3 id="stacking">Stacking</h3>
				<p>When you can see a link but not click it, it's probably lying underneath a transparent element. </p>
				<p>Sometimes, especially in IE6 and below, an element will just look blank, like a big grey (or black or red or white) box. This is normally a stacking error combined with a background colour.
				</p>
				<p>HTML tags are like tupperware boxes with no lids. A box nested inside another box sits both inside and <em>on top</em> of the box that contains it. Another name for this is <em>layer stack</em>. A useful term for the container/content nesting relationship is <em>parent/child</em>.
				</p>
				<p><code>&lt;div&gt;&lt;p&gt;text&lt;/p&gt;&lt;/div&gt;</code></p>
				<p>The layer P sits both inside and on top of the layer div. By default, all our tupperware is transparent,but we can make them opaque by giving them background:
				</p>
				<div style="background:pink; padding:0.15em; font-family:monospace">&lt;div style="background:pink;"&gt;
					<p style="background:grey; padding:0.15em; width:95%; margin:auto">&lt;p style="background:grey;"&gt;text&lt;/p&gt;</p>&lt;/div&gt;
				</div>
				<p>When you take an element out of the <dfn title="the order in which the page is written out">document flow</dfn>, sometimes you need to put it back <em>on top</em> of all the other boxes, so you can see it and interact with it. We do this with <code>z-index</code>:
				<p><code>#header h1 {z-index: 50;}</code></p>
				<p>You might also declare a new stacking context by giving the element Layout. How to make this decision is beyond the scope of this document, which is intended to be a quick reference.
				</p>
				<p><img src="images/z-index.png" alt="the z-index is stack order" /></p>
				<h2 id="margins">Margins and Padding</h2>
				<p>We use a <a href="http://meyerweb.com/eric/thoughts/2007/05/01/reset-reloaded/">reset</a> to zero out all the margins and padding on all the elements in our layout. Sometimes IE doubles up margins, however, or sizes distances in a way that is different to all the other browsers. If it's bugging someone, you can override these differences in the conditionals. It is <em>important</em> to practice pragmatism and discernment when adding overrides. It is not necessary or desirable for the Archive to look identical in every browser; "pixel precison" is not a reasonable or desirable goal because our layout is designed to be <em>flexible</em> and adaptable, so it will work in contexts not yet conceived. When adding styles, you must consider that keeping the code simple and easy to maintain is a <strong>priority</strong>. Part of working on Front End is constantly explaining this to the rest of ADT. It can be frustrating, but it is a necessary part of upholding our principles of accessibility and flexibility.
				</p>
				<p>In IE 5.5 and below, a different box model is used to render elements. You can <a href="http://en.wikipedia.org/wiki/Internet_Explorer_box_model_bug">read about the box model</a>, but it is not normally a problem for us, because we use a <a href="http://www.w3.org/TR/WCAG20-TECHS/G146.html">liquid layout</a>.
				</p>
				<h2 id="inherited">Inherited Width</h2>
				<p>Sometimes IE interprets the declaration <code>width:inherit</code> unexpectedly.  You might get a strangely wide submit button, or something breaking out of its container widthwise.
				</p>
				<p>In the conditionals, redeclare the width on the affected element.</p>
<!--				<p>Pathing means writing out some or part of the path to an element. For example:</p>
				<pre>
&lt;div class="wrapper"&gt;
	&lt;dl class="meta"&gt;
		&lt;dt&gt;Name&lt;/dt&gt;
		&lt;dd&gt;Pathing&lt;/dd&gt;
	&lt;/dl&gt;
&lt;/div&gt;</pre>

<p>The path to <cite>Pathing</cite> is <code>div.wrapper dl dd</code>. You could write just <code>dd</code>, or if you wanted to be more specific, say, if there were lots of definition lists on the page, you might write <code>.wrapper .meta dd</code>.</p>

<p>Sometimes IE needs a more specific path than other browsers.-->
				<h2 id="height">Height</h2>
				<p>Internet Explorer expands every box to contain its content. So height actually means min-height. Min-height is not explicitly supported in IE.
				</p>
				<p>This causes virtually no problems, because we use a <a href="http://www.w3.org/TR/WCAG20-TECHS/G146.html">liquid layout</a>, but it's useful to know. If you declare a <code>min-height</code>, you might need to add a <code>height</code> rule to IE.
				</p>
						<p><a href="index.html">&larr; Back</a></p>
						</div>
		</div>
	</body>
</html>